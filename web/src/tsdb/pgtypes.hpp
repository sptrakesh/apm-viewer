//
// Created by Rakesh on 04/06/2023.
//

#pragma once

#include <pqxx/pqxx>

#include "util/date.hpp"

namespace spt::tsdb
{
  enum class ColumnType : std::uint16_t
  {
    Bool = 16,
    Bytea = 17,
    Char = 18,
    Name = 19,
    Int8 = 20,
    Int2 = 21,
    Int2vector = 22,
    Int4 = 23,
    Regproc = 24,
    Text = 25,
    Oid = 26,
    Tid = 27,
    Xid = 28,
    Cid = 29,
    Oidvector = 30,
    Pg_type = 71,
    Pg_attribute = 75,
    Pg_proc = 81,
    pg_class = 83,
    Json = 114,
    Xml = 142,
    Xml1 = 143,
    Pg_node_tree = 194,
    Json1 = 199,
    Smgr = 210,
    Point = 600,
    Lseg = 601,
    Path = 602,
    Box = 603,
    Polygon = 604,
    Line = 628,
    Line1 = 629,
    Cidr = 650,
    cidr1 = 651,
    Float4 = 700,
    Float8 = 701,
    Abstime = 702,
    Reltime = 703,
    Tinterval = 704,
    Unknown = 705,
    Circle = 718,
    Circle1 = 719,
    Money = 790,
    Money1 = 791,
    Macaddr = 829,
    Inet = 869,
    Bool1 = 1000,
    Bytea1 = 1001,
    Char1 = 1002,
    Name1 = 1003,
    Int21 = 1005,
    Int2vector1 = 1006,
    Int41 = 1007,
    Regproc1 = 1008,
    Text1 = 1009,
    Tid1 = 1010,
    Xid1 = 1011,
    Cid1 = 1012,
    Oidvector1 = 1013,
    Bpchar1 = 1014,
    Varchar1 = 1015,
    Int81 = 1016,
    Point1 = 1017,
    Lseg1 = 1018,
    Path1 = 1019,
    Box1 = 1020,
    Float41 = 1021,
    Float81 = 1022,
    Abstime1 = 1023,
    Reltime1 = 1024,
    Tinterval1 = 1025,
    Polygon1 = 1027,
    Oid1 = 1028,
    Aclitem = 1033,
    Aclitem1 = 1034,
    Macaddr1 = 1040,
    Inet1 = 1041,
    Bpchar = 1042,
    Varchar = 1043,
    Date = 1082,
    Time = 1083,
    Timestamp = 1114,
    Timestamp1 = 1115,
    Date1 = 1182,
    Time1 = 1183,
    Timestamptz = 1184,
    Timestamptz1 = 1185,
    Interval = 1186,
    Interval1 = 1187,
    Numeric1 = 1231,
    Pg_database = 1248,
    Cstring1 = 1263,
    Timetz = 1266,
    Timetz1 = 1270,
    Bit = 1560,
    Bit1 = 1561,
    Varbit = 1562,
    Varbit1 = 1563,
    Numeric = 1700,
    Refcursor = 1790,
    Refcursor1 = 2201,
    Regprocedure = 2202,
    Regoper = 2203,
    Regoperator = 2204,
    Regclass = 2205,
    Regtype = 2206,
    Regprocedure1 = 2207,
    Regoper1 = 2208,
    Regoperator1 = 2209,
    Regclass1 = 2210,
    Regtype1 = 2211,
    Record = 2249,
    Cstring = 2275,
    Any = 2276,
    Anyarray = 2277,
    Void = 2278,
    Trigger = 2279,
    Language_handler = 2280,
    Internal = 2281,
    Opaque = 2282,
    Anyelement = 2283,
    Record1 = 2287,
    Anynonarray = 2776,
    Pg_authid = 2842,
    Pg_auth_members = 2843,
    Txid_snapshot1 = 2949,
    Uuid = 2950,
    Uuid1 = 2951,
    Txid_snapshot = 2970,
    Fdw_handler = 3115,
    Anyenum = 3500,
    Tsvector = 3614,
    Tsquery = 3615,
    Gtsvector = 3642,
    Tsvector1 = 3643,
    Gtsvector1 = 3644,
    Tsquery1 = 3645,
    Regconfig = 3734,
    Regconfig1 = 3735,
    Regdictionary = 3769,
    Regdictionary1 = 3770,
    Anyrange = 3831,
    Event_trigger = 3838,
    Int4range = 3904,
    Int4range1 = 3905,
    Numrange = 3906,
    Numrange1 = 3907,
    Tsrange = 3908,
    Tsrange1 = 3909,
    Tstzrange = 3910,
    Tstzrange1 = 3911,
    Daterange = 3912,
    Daterange1 = 3913,
    Int8range = 3926,
    Int8range1 = 3927
  };

  std::string_view columnType( std::uint32_t type );

  inline std::string_view columnType( ColumnType type )
  {
    return columnType( static_cast<uint16_t>( type ) );
  }

  bool isTimestamp( const pqxx::field& field );
  bool isString( const pqxx::field& field );
  bool isNumber( const pqxx::field& field );

  std::optional<util::DateTime> timestamp( const pqxx::field& field );
  std::optional<std::string> string( const pqxx::field& field );
  std::optional<double> number( const pqxx::field& field );
}